[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/articles/shared_workflow.html","id":"introduction-statistical-model","dir":"Articles","previous_headings":"","what":"Introduction: statistical model","title":"Protein Quantification with Shared Peptides: Workflow","text":"illustrate proposed workflow summarization sets proteins shared peptides. Let us consider group \\(K\\) proteins share peptides. spectral Feature \\(f\\) define following set: \\[\\begin{equation*}     V(f) = \\{k \\1, \\ldots, K: \\text{ Feature f matches Protein k}\\} \\end{equation*}\\] propose following model summarization: \\[\\begin{multline}     X_{cf} = \\mu + \\sum_{k \\V(f)}Weight_{fk}\\left(Protein_k + Channel_{kc}\\right) + Feature_{f} + \\varepsilon_{cf}, \\\\     \\forall_k \\sum_{c = 1}^{C}Channel_{kc} = 0, \\sum_{k = 1}^{K}Protein_k = 0, \\sum_{f = 1}^{F} Feature_{f} = 0, \\mathbb{E}\\varepsilon_{cf} = 0, \\varepsilon_{cf}\\, iid %\\stackrel{iid}{\\sim} \\mathcal{N}(0, \\sigma^2) \\end{multline}\\] subject following constraints: \\[\\begin{eqnarray*} \\forall_{f} \\sum_{k \\V(k)}Weight_{fk} &= 1, \\\\ \\forall_{f, k} Weight_{fk} &\\geq 0, \\end{eqnarray*}\\] \\(X_{cf}\\) denotes log-intensity Feature \\(f\\) Channel \\(c\\), \\(Feature_{f}\\) fixed effect associated spectral features \\(\\varepsilon_{cf}\\) denotes random error. model fitted Run \\(mt\\) separately, indices \\(f\\) \\(c\\) understood \\(f(mt)\\) \\(c(mt)\\), respectively. sum effects \\(\\mu + Protein_k + Channel_{kc}\\) describes abundance protein \\(k\\) channel \\(c\\). Parameter \\(Protein_k\\) describes baselines abundance \\(k-th\\) protein, term \\(Channel_{kc}\\) allows us model shape protein-level profile. Thus, protein-level summary protein \\(k\\) Run \\(mt\\) given \\(\\widehat{Y}_{kc} = \\hat{\\mu} + \\widehat{Protein}_{k} + \\widehat{Channel}_{kc}\\). Statistical implementation details can found accompying paper (see citation(\"MSstatsWeightedSummary\")). short, model fitted cluster proteins separately via iterative procedure alternates fixing Weights estimating effects, estimating Weights holding parameters fixed.","code":""},{"path":"/articles/shared_workflow.html","id":"protein-summarization-workflow","dir":"Articles","previous_headings":"","what":"Protein summarization workflow","title":"Protein Quantification with Shared Peptides: Workflow","text":"First, let us load required packages:","code":"library(MSstatsWeightedSummary) library(ggplot2) library(data.table) library(MSstatsTMT)"},{"path":"/articles/shared_workflow.html","id":"input-format-and-example-data","dir":"Articles","previous_headings":"Protein summarization workflow","what":"Input format and example data","title":"Protein Quantification with Shared Peptides: Workflow","text":"use following simulated data set example: data set contains additional columns. Required input consists columns MSstatsTMT format: ProteinName, PeptideSequence, Charge, PSM, Run, Channel, Intensity, Condition, BioReplicate, Mixture, TechRepMixture. three proteins data set. protein one unique peptide shares multiple peptide every protein.","code":"data(simulated_dataset) head(simulated_dataset) #>    ProteinName PeptideSequence Charge    PSM    Run Mixture TechRepMixture #>         <fctr>          <char>  <num> <char> <fctr>  <fctr>         <fctr> #> 1:   Prot_0001             P11      1  P11_1    1_1       1              1 #> 2:   Prot_0001             P11      1  P11_1    1_1       1              1 #> 3:   Prot_0001             P11      1  P11_1    1_1       1              1 #> 4:   Prot_0001             P11      1  P11_1    1_1       1              1 #> 5:   Prot_0001             P11      1  P11_1    1_1       1              1 #> 6:   Prot_0001             P11      1  P11_1    1_1       1              1 #>    Channel BioReplicate Condition Log2Intensity Intensity IsUnique #>     <fctr>       <fctr>    <fctr>         <num>     <num>   <lgcl> #> 1:       8          1_1         8      16.47425  91042.57     TRUE #> 2:       7          1_1         7      16.75157 110338.30     TRUE #> 3:       6          1_1         6      16.98772 129961.28     TRUE #> 4:       5          1_1         5      17.03397 134194.66     TRUE #> 5:       1          1_1         1      17.37219 169648.74     TRUE #> 6:       2          1_1         2      17.32688 164403.55     TRUE #>    log2IntensityNormalized AbundanceStandard #>                      <num>             <num> #> 1:                16.47425       -0.59205067 #> 2:                16.75157       -0.31473021 #> 3:                16.98772       -0.07858202 #> 4:                17.03397       -0.03233669 #> 5:                17.37219        0.30588675 #> 6:                17.32688        0.26057756 required_input = simulated_dataset[, .(ProteinName, PeptideSequence, Charge, PSM, Run,                             Channel, Intensity, Condition, BioReplicate,                            Mixture, TechRepMixture)] head(required_input) #>    ProteinName PeptideSequence Charge    PSM    Run Channel Intensity Condition #>         <fctr>          <char>  <num> <char> <fctr>  <fctr>     <num>    <fctr> #> 1:   Prot_0001             P11      1  P11_1    1_1       8  91042.57         8 #> 2:   Prot_0001             P11      1  P11_1    1_1       7 110338.30         7 #> 3:   Prot_0001             P11      1  P11_1    1_1       6 129961.28         6 #> 4:   Prot_0001             P11      1  P11_1    1_1       5 134194.66         5 #> 5:   Prot_0001             P11      1  P11_1    1_1       1 169648.74         1 #> 6:   Prot_0001             P11      1  P11_1    1_1       2 164403.55         2 #>    BioReplicate Mixture TechRepMixture #>          <fctr>  <fctr>         <fctr> #> 1:          1_1       1              1 #> 2:          1_1       1              1 #> 3:          1_1       1              1 #> 4:          1_1       1              1 #> 5:          1_1       1              1 #> 6:          1_1       1              1"},{"path":"/articles/shared_workflow.html","id":"finding-protein-clusters","dir":"Articles","previous_headings":"Protein summarization workflow","what":"Finding protein clusters","title":"Protein Quantification with Shared Peptides: Workflow","text":"output signal processing tools lists proteins match given protein, data converted format row corresponds single observation intensity Protein, PSM, Run Channel. means shared peptides appear multiple times PSM table, matching protein. output lists single protein, adjustProteinAssignments function can used add candidate proteins via sequence matching. example data set already includes possiblities. package provides tools finding connected components peptide-protein graph. Functions createPeptideProteinGraph addClusterMembership can used annotate data set IDs protein clusters, illustrated . Functions getClusterStatistics plotClusterStats can used calculate visualize additional summary statistics counts unique shared peptides cluster.","code":"pp_graph = createPeptideProteinGraph(required_input) required_input = addClusterMembership(required_input, pp_graph) unique(required_input[, .(Cluster, ProteinName)]) #> Key: <ProteinName> #>    Cluster ProteinName #>      <int>      <char> #> 1:       1   Prot_0001 #> 2:       1   Prot_0002 #> 3:       1   Prot_0003"},{"path":"/articles/shared_workflow.html","id":"normalization","dir":"Articles","previous_headings":"Protein summarization workflow","what":"Normalization","title":"Protein Quantification with Shared Peptides: Workflow","text":"format duplicated rows shared peptides, normalization requires care. ensure feature intensity used normalization, provide function called normalizeSharedPeptides. function performs feature-level normalization data previously implemented MSstatsTMT package. result, column called log2IntensityNormalized added data.","code":"head(simulated_dataset[, .(ProteinName, PSM, Run, Channel, log2IntensityNormalized)]) #>    ProteinName    PSM    Run Channel log2IntensityNormalized #>         <fctr> <char> <fctr>  <fctr>                   <num> #> 1:   Prot_0001  P11_1    1_1       8                16.47425 #> 2:   Prot_0001  P11_1    1_1       7                16.75157 #> 3:   Prot_0001  P11_1    1_1       6                16.98772 #> 4:   Prot_0001  P11_1    1_1       5                17.03397 #> 5:   Prot_0001  P11_1    1_1       1                17.37219 #> 6:   Prot_0001  P11_1    1_1       2                17.32688"},{"path":"/articles/shared_workflow.html","id":"summarization","dir":"Articles","previous_headings":"Protein summarization workflow","what":"Summarization","title":"Protein Quantification with Shared Peptides: Workflow","text":"Protein-level summarization main functionality package. extend MSstatsTMT workflow jointly estimating abundance proteins given protein cluster. done via iterative procedure implemented getWeightedProteinSummary function. function requires following input: feature_data: input data MSstatsTMT format. columns Cluster log2IntensityNormalized provided, clusters computed log-intensity column added assumption intensities normalized, norm: norm residuals (objective function): can equal “Huber” (Huber norm/loss) “p_norm” (p-norm). norm_parameter: value p parameter (norm = “p_norm”) M parameter Huber loss (norm = “Huber”). weights_mode: “contributions” “probabilities”. former option constraints feature-protein weights non-negative sum 1 feature, latter option removes “sum 1” condition, instead restricting weights [0, 1] interval. Defaults “contributions”. tolerance: tolerance differences weights iterative procedure. max_iter: maximum number iterations iterative fitting algorithm. save_weights_history: TRUE, weights iteration included output. save_convergence_history: TRUE, differences weights consecutive iterations included output. Output function object class “MSstatsWeightedSummary”. next section explains access elements object. Two additional functions provided users require customized workflow. Function getPeptideProteinWeights calculates feature-protein weights given combination protein-level summary feature-level data, summarizeProteinsClusterSingleRun estimates protein-level data given set weights data single MS run.","code":"summary = getWeightedProteinSummary(simulated_dataset, norm = \"Huber\",                                     norm_parameter = 0.1,                                     max_iter = 30)"},{"path":"/articles/shared_workflow.html","id":"diagnostics-and-plotting","dir":"Articles","previous_headings":"Protein summarization workflow","what":"Diagnostics and plotting","title":"Protein Quantification with Shared Peptides: Workflow","text":"Output getWeightedProteinSummary function extension output proteinSummarization MSstatsTMT. includes following elements: feature-level (input) data accessed featureData function, protein-level (summary) data accessed proteinData function, final feature-protein weights accessed featureWeights function, information convergence algorithm accessed convergenceSummary function, optional history convergence accessed convergenceHistory function, optional history weights accessed weightsHistory function. Summary can plotted given cluster set proteins using plotSummary function.  also possible obtain protein cluster information via proteinClusters function.","code":"head(featureData(summary)) # feature-level input data #>    ProteinName PeptideSequence Charge    PSM Channel Intensity    Run Condition #>         <char>          <char>  <num> <char>  <fctr>     <num> <fctr>    <fctr> #> 1:   Prot_0001             P11      1  P11_1       8  91042.57    1_1         8 #> 2:   Prot_0001             P11      1  P11_1       7 110338.30    1_1         7 #> 3:   Prot_0001             P11      1  P11_1       6 129961.28    1_1         6 #> 4:   Prot_0001             P11      1  P11_1       5 134194.66    1_1         5 #> 5:   Prot_0001             P11      1  P11_1       1 169648.74    1_1         1 #> 6:   Prot_0001             P11      1  P11_1       2 164403.55    1_1         2 #>    BioReplicate Mixture TechRepMixture log2IntensityNormalized Cluster #>          <fctr>  <fctr>         <fctr>                   <num>  <char> #> 1:          1_1       1              1                16.47425  1__1_1 #> 2:          1_1       1              1                16.75157  1__1_1 #> 3:          1_1       1              1                16.98772  1__1_1 #> 4:          1_1       1              1                17.03397  1__1_1 #> 5:          1_1       1              1                17.37219  1__1_1 #> 6:          1_1       1              1                17.32688  1__1_1 head(proteinData(summary)) # output summary #> Key: <Run, Channel> #>       Run Channel   Protein Abundance Mixture TechRepMixture Condition #>    <fctr>  <char>    <char>     <num>  <fctr>         <fctr>    <fctr> #> 1:    1_1       1 Prot_0001  16.16886       1              1         1 #> 2:    1_1       1 Prot_0002  16.94093       1              1         1 #> 3:    1_1       1 Prot_0003  14.28871       1              1         1 #> 4:    1_1       2 Prot_0001  16.07184       1              1         2 #> 5:    1_1       2 Prot_0002  17.03870       1              1         2 #> 6:    1_1       2 Prot_0003  14.22520       1              1         2 #>    BioReplicate #>          <fctr> #> 1:          1_1 #> 2:          1_1 #> 3:          1_1 #> 4:          1_1 #> 5:          1_1 #> 6:          1_1 featureWeights(summary, shared_only = TRUE) # Weights #>     ProteinName                           PSM    Run    Weight IsUnique #>          <char>                        <char> <fctr>     <num>   <lgcl> #>  1:   Prot_0001 PS1Prot0001Prot0002Prot0003_1    1_1 0.0000000    FALSE #>  2:   Prot_0002 PS1Prot0001Prot0002Prot0003_1    1_1 1.0000000    FALSE #>  3:   Prot_0003 PS1Prot0001Prot0002Prot0003_1    1_1 0.0000000    FALSE #>  4:   Prot_0001         PS1Prot0001Prot0002_1    1_1 0.3905934    FALSE #>  5:   Prot_0002         PS1Prot0001Prot0002_1    1_1 0.6094066    FALSE #>  6:   Prot_0001         PS1Prot0001Prot0003_1    1_1 0.5848836    FALSE #>  7:   Prot_0003         PS1Prot0001Prot0003_1    1_1 0.4151164    FALSE #>  8:   Prot_0002         PS1Prot0002Prot0003_1    1_1 0.5508112    FALSE #>  9:   Prot_0003         PS1Prot0002Prot0003_1    1_1 0.4491888    FALSE #> 10:   Prot_0001 PS2Prot0001Prot0002Prot0003_1    1_1 0.0000000    FALSE #> 11:   Prot_0002 PS2Prot0001Prot0002Prot0003_1    1_1 0.7402802    FALSE #> 12:   Prot_0003 PS2Prot0001Prot0002Prot0003_1    1_1 0.2597198    FALSE #> 13:   Prot_0001         PS2Prot0001Prot0002_1    1_1 0.4577356    FALSE #> 14:   Prot_0002         PS2Prot0001Prot0002_1    1_1 0.5422644    FALSE #> 15:   Prot_0001         PS2Prot0001Prot0003_1    1_1 0.3429757    FALSE #> 16:   Prot_0003         PS2Prot0001Prot0003_1    1_1 0.6570243    FALSE #> 17:   Prot_0002         PS2Prot0002Prot0003_1    1_1 0.5983119    FALSE #> 18:   Prot_0003         PS2Prot0002Prot0003_1    1_1 0.4016881    FALSE convergenceSummary(summary) #>    Cluster    Run NumIterations FinalDiffValue tolerance Converged #>     <char> <char>         <int>          <num>     <num>    <lgcl> #> 1:  1__1_1    1_1             7     0.09036566       0.1      TRUE plotSummary(summary, cluster = \"1__1_1\")"},{"path":"/articles/shared_workflow.html","id":"msstatstmt-workflow","dir":"Articles","previous_headings":"Protein summarization workflow","what":"MSstatsTMT workflow","title":"Protein Quantification with Shared Peptides: Workflow","text":"Function makeMSstatsTMTInput can used convert output summarization format suitable use groupComparisonTMT function. Optional parameter msstatstmt_output can provided merge output proteinSummarization shared peptides-based summary. Currently, since protein-level normalization done proteinSummarization step MSstats workflow, possible use “Norm” Channel jointly normalize output unique-peptide based summarization (done MSstatsTMT) cluster summarization (done MSstatsWeightedSummary) using functionalities either packages. intend add feature future.","code":"gc_input = makeMSstatsTMTInput(summary) str(gc_input) #> List of 2 #>  $ FeatureLevelData:Classes 'data.table' and 'data.frame':   168 obs. of  13 variables: #>   ..$ ProteinName            : chr [1:168] \"Prot_0001\" \"Prot_0001\" \"Prot_0001\" \"Prot_0001\" ... #>   ..$ PeptideSequence        : chr [1:168] \"P11\" \"P11\" \"P11\" \"P11\" ... #>   ..$ Charge                 : num [1:168] 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ PSM                    : chr [1:168] \"P11_1\" \"P11_1\" \"P11_1\" \"P11_1\" ... #>   ..$ Channel                : Factor w/ 8 levels \"1\",\"2\",\"3\",\"4\",..: 8 7 6 5 1 2 3 4 1 2 ... #>   ..$ Intensity              : num [1:168] 91043 110338 129961 134195 169649 ... #>   ..$ Run                    : Factor w/ 1 level \"1_1\": 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ Condition              : Factor w/ 8 levels \"1\",\"2\",\"3\",\"4\",..: 8 7 6 5 1 2 3 4 1 2 ... #>   ..$ BioReplicate           : Factor w/ 1 level \"1_1\": 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ Mixture                : Factor w/ 1 level \"1\": 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ TechRepMixture         : Factor w/ 1 level \"1\": 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ log2IntensityNormalized: num [1:168] 16.5 16.8 17 17 17.4 ... #>   ..$ Cluster                : chr [1:168] \"1__1_1\" \"1__1_1\" \"1__1_1\" \"1__1_1\" ... #>   ..- attr(*, \".internal.selfref\")=<externalptr>  #>   ..- attr(*, \"index\")= int(0)  #>   .. ..- attr(*, \"__Cluster\")= int(0)  #>  $ ProteinLevelData:Classes 'data.table' and 'data.frame':   24 obs. of  8 variables: #>   ..$ Run           : Factor w/ 1 level \"1_1\": 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ Channel       : chr [1:24] \"1\" \"1\" \"1\" \"2\" ... #>   ..$ Protein       : chr [1:24] \"Prot_0001\" \"Prot_0002\" \"Prot_0003\" \"Prot_0001\" ... #>   ..$ Abundance     : num [1:24] 16.2 16.9 14.3 16.1 17 ... #>   ..$ Mixture       : Factor w/ 1 level \"1\": 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ TechRepMixture: Factor w/ 1 level \"1\": 1 1 1 1 1 1 1 1 1 1 ... #>   ..$ Condition     : Factor w/ 8 levels \"1\",\"2\",\"3\",\"4\",..: 1 1 1 2 2 2 3 3 3 4 ... #>   ..$ BioReplicate  : Factor w/ 1 level \"1_1\": 1 1 1 1 1 1 1 1 1 1 ... #>   ..- attr(*, \".internal.selfref\")=<externalptr>  #>   ..- attr(*, \"sorted\")= chr [1:2] \"Run\" \"Channel\" #>   ..- attr(*, \"index\")= int(0)  #>   .. ..- attr(*, \"__Protein\")= int [1:24] 1 4 7 10 13 16 19 22 2 5 ... # Contrasts matrix cm = matrix(c(-1, 0, 0, 0, 1, 0, 0, 0,               0, -1, 0, 0, 0, 1, 0, 0,               0, 0, -1, 0, 0, 0, 1, 0,               0, 0, 0, -1, 0, 0, 0, 1),             byrow = TRUE, ncol = 8) colnames(cm) = as.character(1:8) row.names(cm) = paste(1:4, \"vs\", 5:8)   gc_output = groupComparisonTMT(gc_input, cm, use_log_file = FALSE) #> INFO  [2024-09-17 12:03:01] Design: 1 mixture. #> INFO  [2024-09-17 12:03:01] Design: 1 MS run per mixture. #> INFO  [2024-09-17 12:03:01] Design: 1 subject per condition (No biological variation). #> INFO  [2024-09-17 12:03:01] Model fitting for 3 proteins. #>   |                                                                              |                                                                      |   0%  |                                                                              |=======================                                               |  33%  |                                                                              |===============================================                       |  67%  |                                                                              |======================================================================| 100% #> INFO  [2024-09-17 12:03:01] Testing for 3 proteins: #>   |                                                                              |                                                                      |   0%  |                                                                              |=======================                                               |  33%  |                                                                              |===============================================                       |  67%  |                                                                              |======================================================================| 100% gc_output$ComparisonResult #>       Protein  Label      log2FC    SE    DF pvalue adj.pvalue #>        <fctr> <char>       <num> <num> <num>  <num>      <num> #>  1: Prot_0001 1 vs 5 -0.32302748   NaN     0    NaN        NaN #>  2: Prot_0001 2 vs 6 -0.28129458   NaN     0    NaN        NaN #>  3: Prot_0001 3 vs 7 -0.41480253   NaN     0    NaN        NaN #>  4: Prot_0001 4 vs 8 -0.85946263   NaN     0    NaN        NaN #>  5: Prot_0002 1 vs 5 -0.12743993   NaN     0    NaN        NaN #>  6: Prot_0002 2 vs 6 -0.40505177   NaN     0    NaN        NaN #>  7: Prot_0002 3 vs 7 -0.33734986   NaN     0    NaN        NaN #>  8: Prot_0002 4 vs 8 -0.26747381   NaN     0    NaN        NaN #>  9: Prot_0003 1 vs 5  0.06348433   NaN     0    NaN        NaN #> 10: Prot_0003 2 vs 6  0.16007991   NaN     0    NaN        NaN #> 11: Prot_0003 3 vs 7 -0.19260057   NaN     0    NaN        NaN #> 12: Prot_0003 4 vs 8  0.03574476   NaN     0    NaN        NaN #>                         issue #>                        <char> #>  1: SingleMeasurePerCondition #>  2: SingleMeasurePerCondition #>  3: SingleMeasurePerCondition #>  4: SingleMeasurePerCondition #>  5: SingleMeasurePerCondition #>  6: SingleMeasurePerCondition #>  7: SingleMeasurePerCondition #>  8: SingleMeasurePerCondition #>  9: SingleMeasurePerCondition #> 10: SingleMeasurePerCondition #> 11: SingleMeasurePerCondition #> 12: SingleMeasurePerCondition"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mateusz Staniak. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Staniak M (2024). MSstatsWeightedSummary: Weighted Protein-Level Summarization Protein Clusters. R package version 0.99.6.","code":"@Manual{,   title = {MSstatsWeightedSummary: Weighted Protein-Level Summarization for Protein Clusters},   author = {Mateusz Staniak},   year = {2024},   note = {R package version 0.99.6}, }"},{"path":[]},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation:","title":"Weighted Protein-Level Summarization for Protein Clusters","text":"","code":"if (!require(devtools)) {     install.packages(\"devtools\") } devtools::install_github(\"Vitek-Lab/MSstatsWeightedSummary\")"},{"path":"/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting help:","title":"Weighted Protein-Level Summarization for Protein Clusters","text":"","code":"?getWeightedProteinSummary ?normalizeSharedPeptides ?addClusterMembership vignette(package = \"MSstatsWeightedSummary\")"},{"path":"/index.html","id":"major-functionalities","dir":"","previous_headings":"","what":"Major functionalities:","title":"Weighted Protein-Level Summarization for Protein Clusters","text":"normalizeSharedPeptides: feature-level data MSstatsTMT normalization accounts shared peptides addClusterMembership: identification clusters proteins share peptides (connected components peptide-protein graph) getWeightedSummary: protein-level summarization feature-level data. Performed separately cluster proteins run. Input output compatible MSstatsTMT workflow analysis mass spectrometry proteomics data isobaric labeling.","code":""},{"path":"/index.html","id":"how-to-cite","dir":"","previous_headings":"","what":"How to cite","title":"Weighted Protein-Level Summarization for Protein Clusters","text":"TBA.","code":""},{"path":"/reference/MSstatsWeightedSummary-class.html","id":null,"dir":"Reference","previous_headings":"","what":"Output of weighted summarization — MSstatsWeightedSummary-class","title":"Output of weighted summarization — MSstatsWeightedSummary-class","text":"Output weighted summarization","code":""},{"path":"/reference/MSstatsWeightedSummary-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Output of weighted summarization — MSstatsWeightedSummary-class","text":"FeatureLevelData feature-level (input) data ProteinLevelData protein-level (summarized) output data Weights table final peptide-protein Weights ConvergenceSummary table information convergence Cluster Run WeightsHistory optional data.table Weights iterations fitting algorithm ConvergenceHistory optional data.table sums absolute values differences Weights consecutive iteration","code":""},{"path":"/reference/addClusterMembership.html","id":null,"dir":"Reference","previous_headings":"","what":"Add information about connected subcomponents of the peptide-protein graph to quantitative data. — addClusterMembership","title":"Add information about connected subcomponents of the peptide-protein graph to quantitative data. — addClusterMembership","text":"Add information connected subcomponents peptide-protein graph quantitative data.","code":""},{"path":"/reference/addClusterMembership.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add information about connected subcomponents of the peptide-protein graph to quantitative data. — addClusterMembership","text":"","code":"addClusterMembership(   quantification_data,   peptide_protein_graph,   protein_column = \"ProteinName\" )"},{"path":"/reference/addClusterMembership.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add information about connected subcomponents of the peptide-protein graph to quantitative data. — addClusterMembership","text":"quantification_data MS data, preferably `MSstats` `MSstatsTMT` format. peptide_protein_graph graph created `createPeptideProteinGraph` function. protein_column name column protein names.","code":""},{"path":"/reference/adjustProteinAssignments.html","id":null,"dir":"Reference","previous_headings":"","what":"Add missing proteins to PSM-level data based on a fasta database — adjustProteinAssignments","title":"Add missing proteins to PSM-level data based on a fasta database — adjustProteinAssignments","text":"Add missing proteins PSM-level data based fasta database","code":""},{"path":"/reference/adjustProteinAssignments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add missing proteins to PSM-level data based on a fasta database — adjustProteinAssignments","text":"","code":"adjustProteinAssignments(   quantification_data,   fasta_db_path,   protein_column = \"ProteinName\",   peptide_column = \"PeptideSequence\",   n_cores = 1,   keep_unmodified = FALSE )"},{"path":"/reference/adjustProteinAssignments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add missing proteins to PSM-level data based on a fasta database — adjustProteinAssignments","text":"quantification_data MS data, preferably `MSstats` `MSstatsTMT` format. fasta_db_path path fasta file store protein sequences protein_column name column protein names. peptide_column name column peptide sequences. n_cores number cores used searching database. keep_unmodified TRUE, column stores sequences unmodified peptides added output data","code":""},{"path":"/reference/checkDataCorrectness.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if data is in MSstatsTMT format — checkDataCorrectness","title":"Check if data is in MSstatsTMT format — checkDataCorrectness","text":"Check data MSstatsTMT format","code":""},{"path":"/reference/checkDataCorrectness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if data is in MSstatsTMT format — checkDataCorrectness","text":"","code":"checkDataCorrectness(feature_data)"},{"path":"/reference/convergenceHistory-MSstatsWeightedSummary-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract convergence history from MSstatsWeightedSummary object — convergenceHistory,MSstatsWeightedSummary-method","title":"Extract convergence history from MSstatsWeightedSummary object — convergenceHistory,MSstatsWeightedSummary-method","text":"Extract convergence history MSstatsWeightedSummary object","code":""},{"path":"/reference/convergenceHistory-MSstatsWeightedSummary-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract convergence history from MSstatsWeightedSummary object — convergenceHistory,MSstatsWeightedSummary-method","text":"","code":"# S4 method for MSstatsWeightedSummary convergenceHistory(weighted_summary)"},{"path":"/reference/convergenceHistory-MSstatsWeightedSummary-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract convergence history from MSstatsWeightedSummary object — convergenceHistory,MSstatsWeightedSummary-method","text":"weighted_summary output getWeightedProteinSummary function","code":""},{"path":"/reference/convergenceHistory-MSstatsWeightedSummary-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract convergence history from MSstatsWeightedSummary object — convergenceHistory,MSstatsWeightedSummary-method","text":"data.table","code":""},{"path":"/reference/convergenceHistory.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract convergence history from MSstatsWeightedSummary object — convergenceHistory","title":"Extract convergence history from MSstatsWeightedSummary object — convergenceHistory","text":"Extract convergence history MSstatsWeightedSummary object","code":""},{"path":"/reference/convergenceHistory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract convergence history from MSstatsWeightedSummary object — convergenceHistory","text":"","code":"convergenceHistory(weighted_summary)"},{"path":"/reference/convergenceSummary-MSstatsWeightedSummary-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract convergence information from MSstatsWeightedSummary object — convergenceSummary,MSstatsWeightedSummary-method","title":"Extract convergence information from MSstatsWeightedSummary object — convergenceSummary,MSstatsWeightedSummary-method","text":"Extract convergence information MSstatsWeightedSummary object","code":""},{"path":"/reference/convergenceSummary-MSstatsWeightedSummary-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract convergence information from MSstatsWeightedSummary object — convergenceSummary,MSstatsWeightedSummary-method","text":"","code":"# S4 method for MSstatsWeightedSummary convergenceSummary(weighted_summary)"},{"path":"/reference/convergenceSummary-MSstatsWeightedSummary-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract convergence information from MSstatsWeightedSummary object — convergenceSummary,MSstatsWeightedSummary-method","text":"weighted_summary output getWeightedProteinSummary function","code":""},{"path":"/reference/convergenceSummary-MSstatsWeightedSummary-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract convergence information from MSstatsWeightedSummary object — convergenceSummary,MSstatsWeightedSummary-method","text":"data.table","code":""},{"path":"/reference/convergenceSummary.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract convergence information from MSstatsWeightedSummary object — convergenceSummary","title":"Extract convergence information from MSstatsWeightedSummary object — convergenceSummary","text":"Extract convergence information MSstatsWeightedSummary object","code":""},{"path":"/reference/convergenceSummary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract convergence information from MSstatsWeightedSummary object — convergenceSummary","text":"","code":"convergenceSummary(weighted_summary)"},{"path":"/reference/createPeptideProteinGraph.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper around `igraph::graph_from_data_frame` — createPeptideProteinGraph","title":"Wrapper around `igraph::graph_from_data_frame` — createPeptideProteinGraph","text":"Wrapper around `igraph::graph_from_data_frame`","code":""},{"path":"/reference/createPeptideProteinGraph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper around `igraph::graph_from_data_frame` — createPeptideProteinGraph","text":"","code":"createPeptideProteinGraph(   quantification_data,   protein_column = \"ProteinName\",   peptide_column = \"PeptideSequence\",   by_run = FALSE )"},{"path":"/reference/createPeptideProteinGraph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper around `igraph::graph_from_data_frame` — createPeptideProteinGraph","text":"quantification_data MS data, preferably `MSstats` `MSstatsTMT` format. protein_column name column protein names. peptide_column name column peptide sequences.","code":""},{"path":"/reference/featureData-MSstatsWeightedSummary-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract feature-level data from MSstatsWeightedSummary object — featureData,MSstatsWeightedSummary-method","title":"Extract feature-level data from MSstatsWeightedSummary object — featureData,MSstatsWeightedSummary-method","text":"Extract feature-level data MSstatsWeightedSummary object","code":""},{"path":"/reference/featureData-MSstatsWeightedSummary-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract feature-level data from MSstatsWeightedSummary object — featureData,MSstatsWeightedSummary-method","text":"","code":"# S4 method for MSstatsWeightedSummary featureData(weighted_summary, proteins = NULL)"},{"path":"/reference/featureData-MSstatsWeightedSummary-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract feature-level data from MSstatsWeightedSummary object — featureData,MSstatsWeightedSummary-method","text":"weighted_summary output getWeightedProteinSummary function proteins optional character vector proteins extract. NULL, proteins returned","code":""},{"path":"/reference/featureData-MSstatsWeightedSummary-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract feature-level data from MSstatsWeightedSummary object — featureData,MSstatsWeightedSummary-method","text":"data.table","code":""},{"path":"/reference/featureData.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract feature-level data from MSstatsWeightedSummary object — featureData","title":"Extract feature-level data from MSstatsWeightedSummary object — featureData","text":"Extract feature-level data MSstatsWeightedSummary object","code":""},{"path":"/reference/featureData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract feature-level data from MSstatsWeightedSummary object — featureData","text":"","code":"featureData(weighted_summary, proteins = NULL)"},{"path":"/reference/featureWeights-MSstatsWeightedSummary-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract weights data from MSstatsWeightedSummary object — featureWeights,MSstatsWeightedSummary-method","title":"Extract weights data from MSstatsWeightedSummary object — featureWeights,MSstatsWeightedSummary-method","text":"Extract weights data MSstatsWeightedSummary object","code":""},{"path":"/reference/featureWeights-MSstatsWeightedSummary-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract weights data from MSstatsWeightedSummary object — featureWeights,MSstatsWeightedSummary-method","text":"","code":"# S4 method for MSstatsWeightedSummary featureWeights(weighted_summary, proteins = NULL, shared_only = TRUE)"},{"path":"/reference/featureWeights-MSstatsWeightedSummary-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract weights data from MSstatsWeightedSummary object — featureWeights,MSstatsWeightedSummary-method","text":"weighted_summary output getWeightedProteinSummary function proteins optional character vector proteins extract. NULL, proteins returned shared_only logical, output data.table include shared peptides","code":""},{"path":"/reference/featureWeights-MSstatsWeightedSummary-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract weights data from MSstatsWeightedSummary object — featureWeights,MSstatsWeightedSummary-method","text":"data.table","code":""},{"path":"/reference/featureWeights.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract weights data from MSstatsWeightedSummary object — featureWeights","title":"Extract weights data from MSstatsWeightedSummary object — featureWeights","text":"Extract weights data MSstatsWeightedSummary object","code":""},{"path":"/reference/featureWeights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract weights data from MSstatsWeightedSummary object — featureWeights","text":"","code":"featureWeights(weighted_summary, proteins = NULL, shared_only = TRUE)"},{"path":"/reference/getAnnotation.html","id":null,"dir":"Reference","previous_headings":"","what":"Make annotation — getAnnotation","title":"Make annotation — getAnnotation","text":"Make annotation","code":""},{"path":"/reference/getAnnotation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make annotation — getAnnotation","text":"","code":"getAnnotation(feature_data)"},{"path":"/reference/getClusterStatistics.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate statistics that describe clusters of proteins and peptides. — getClusterStatistics","title":"Calculate statistics that describe clusters of proteins and peptides. — getClusterStatistics","text":"Calculate statistics describe clusters proteins peptides.","code":""},{"path":"/reference/getClusterStatistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate statistics that describe clusters of proteins and peptides. — getClusterStatistics","text":"","code":"getClusterStatistics(quantification_data, merge = FALSE)"},{"path":"/reference/getClusterStatistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate statistics that describe clusters of proteins and peptides. — getClusterStatistics","text":"quantification_data MS data, preferably `MSstats` `MSstatsTMT` format. merge `TRUE`, calculated statistics merged original data.","code":""},{"path":"/reference/getClusterSummaries.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate weighted summaries for a list of clusters — getClusterSummaries","title":"Calculate weighted summaries for a list of clusters — getClusterSummaries","text":"Calculate weighted summaries list clusters","code":""},{"path":"/reference/getClusterSummaries.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate weighted summaries for a list of clusters — getClusterSummaries","text":"","code":"getClusterSummaries(   cluster_input,   norm,   norm_parameter,   weights_mode,   tolerance,   max_iter,   initial_summary,   weights_penalty,   weights_penalty_param )"},{"path":"/reference/getClusterSummaries.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate weighted summaries for a list of clusters — getClusterSummaries","text":"cluster_input list protein clusters norm \"p_norm\" \"Huber\" norm_parameter p norm==\"p_norm\", M norm==\"Huber\" weights_mode \"contributions\" \"sum one\" \"non-negative\" conditions, \"probabilities\" \"non-negative\" condition. tolerance tolerance indicate weights convergence max_iter maximum number iteration procedure initial_summary \"unique\", \"flat\" \"flat unique\" weights_penalty TRUE, weights penalized deviations equal value proteins matching given PSM weights_penalty_param penalty parameter","code":""},{"path":"/reference/getConvergenceHistory.html","id":null,"dir":"Reference","previous_headings":"","what":"Get details of convergence — getConvergenceHistory","title":"Get details of convergence — getConvergenceHistory","text":"Get details convergence","code":""},{"path":"/reference/getConvergenceHistory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get details of convergence — getConvergenceHistory","text":"","code":"getConvergenceHistory(summary_per_cluster, tolerance, save_convergence_history)"},{"path":"/reference/getConvergenceHistory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get details of convergence — getConvergenceHistory","text":"summary_per_cluster output getClusterSummaries tolerance tolerance indicate weights convergence save_convergence_history logical, TRUE, differences consecutive weights estimator iterations returned","code":""},{"path":"/reference/getConvergenceSummary.html","id":null,"dir":"Reference","previous_headings":"","what":"Get convergence summary — getConvergenceSummary","title":"Get convergence summary — getConvergenceSummary","text":"Get convergence summary","code":""},{"path":"/reference/getConvergenceSummary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get convergence summary — getConvergenceSummary","text":"","code":"getConvergenceSummary(summary_per_cluster, tolerance)"},{"path":"/reference/getConvergenceSummary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get convergence summary — getConvergenceSummary","text":"summary_per_cluster output getClusterSummaries tolerance tolerance indicate weights convergence","code":""},{"path":"/reference/getCurrentWeights.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility function to get weights from current iterations including 0s (removed features) — getCurrentWeights","title":"Utility function to get weights from current iterations including 0s (removed features) — getCurrentWeights","text":"Utility function get weights current iterations including 0s (removed features)","code":""},{"path":"/reference/getCurrentWeights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility function to get weights from current iterations including 0s (removed features) — getCurrentWeights","text":"","code":"getCurrentWeights(weights, peptide_protein_dt)"},{"path":"/reference/getCurrentWeights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility function to get weights from current iterations including 0s (removed features) — getCurrentWeights","text":"weights table weights (columns ProteinName, PSM, Weight) peptide_protein_dt table peptide-protein matches","code":""},{"path":"/reference/getDiscordantInfo.html","id":null,"dir":"Reference","previous_headings":"","what":"Cluster peptide profiles — getDiscordantInfo","title":"Cluster peptide profiles — getDiscordantInfo","text":"Cluster peptide profiles","code":""},{"path":"/reference/getDiscordantInfo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cluster peptide profiles — getDiscordantInfo","text":"","code":"getDiscordantInfo(input, use_control = TRUE, control_pattern = \"DMSO\")"},{"path":"/reference/getDiscordantInfo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cluster peptide profiles — getDiscordantInfo","text":"input data.table MSstatsTMT format use_control TRUE, control group channels used clustering control_pattern regular expression identifies control conditions","code":""},{"path":"/reference/getDiscordantInfo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cluster peptide profiles — getDiscordantInfo","text":"data.table","code":""},{"path":"/reference/getPeptideProteinWeights.html","id":null,"dir":"Reference","previous_headings":"","what":"Get PSM-protein weights for summarization with shared peptides — getPeptideProteinWeights","title":"Get PSM-protein weights for summarization with shared peptides — getPeptideProteinWeights","text":"Get PSM-protein weights summarization shared peptides","code":""},{"path":"/reference/getPeptideProteinWeights.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get PSM-protein weights for summarization with shared peptides — getPeptideProteinWeights","text":"","code":"getPeptideProteinWeights(   feature_data,   norm = \"p_norm\",   norm_parameter = 1,   weights_mode = \"contributions\",   weights_penalty = FALSE,   weights_penalty_param = 0.1 )"},{"path":"/reference/getPeptideProteinWeights.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get PSM-protein weights for summarization with shared peptides — getPeptideProteinWeights","text":"feature_data data.table MSstatsTMT format. See also Details section norm \"p_norm\" \"Huber\" norm_parameter p norm==\"p_norm\", M norm==\"Huber\" weights_mode \"contributions\" \"sum one\" \"non-negative\" conditions, \"probabilities\" \"non-negative\" condition. weights_penalty TRUE, weights penalized deviations equal value proteins matching given PSM weights_penalty_param penalty parameter","code":""},{"path":"/reference/getPeptideProteinWeights.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get PSM-protein weights for summarization with shared peptides — getPeptideProteinWeights","text":"data.table","code":""},{"path":"/reference/getProteinSummaryDesign.html","id":null,"dir":"Reference","previous_headings":"","what":"Get design matrix for protein-level summarization — getProteinSummaryDesign","title":"Get design matrix for protein-level summarization — getProteinSummaryDesign","text":"Get design matrix protein-level summarization","code":""},{"path":"/reference/getProteinSummaryDesign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get design matrix for protein-level summarization — getProteinSummaryDesign","text":"","code":"getProteinSummaryDesign(feature_data)"},{"path":"/reference/getProteinSummaryDesign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get design matrix for protein-level summarization — getProteinSummaryDesign","text":"feature_data data.table MSstatsTMT format. See also Details section","code":""},{"path":"/reference/getProteinsClusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Split data into a list of clusters — getProteinsClusters","title":"Split data into a list of clusters — getProteinsClusters","text":"Split data list clusters","code":""},{"path":"/reference/getProteinsClusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Split data into a list of clusters — getProteinsClusters","text":"","code":"getProteinsClusters(feature_data)"},{"path":"/reference/getProteinsClusters.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Split data into a list of clusters — getProteinsClusters","text":"feature_data data.table MSstatsTMT format. See also Details section","code":""},{"path":"/reference/getProteinsOptimProblem.html","id":null,"dir":"Reference","previous_headings":"","what":"Get optimization problem for protein-level summaries — getProteinsOptimProblem","title":"Get optimization problem for protein-level summaries — getProteinsOptimProblem","text":"Get optimization problem protein-level summaries","code":""},{"path":"/reference/getProteinsOptimProblem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get optimization problem for protein-level summaries — getProteinsOptimProblem","text":"","code":"getProteinsOptimProblem(design_matrix, y, norm, norm_parameter, proteins, psms)"},{"path":"/reference/getProteinsOptimProblem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get optimization problem for protein-level summaries — getProteinsOptimProblem","text":"design_matrix design matrix protein model optimization y observed feature intensities norm \"p_norm\" \"Huber\" norm_parameter p norm==\"p_norm\", M norm==\"Huber\" proteins vector unique proteins vector unique psms","code":""},{"path":"/reference/getWeightedProteinSummary.html","id":null,"dir":"Reference","previous_headings":"","what":"Get robust protein-level summary based on unique and shared peptides — getWeightedProteinSummary","title":"Get robust protein-level summary based on unique and shared peptides — getWeightedProteinSummary","text":"Get robust protein-level summary based unique shared peptides","code":""},{"path":"/reference/getWeightedProteinSummary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get robust protein-level summary based on unique and shared peptides — getWeightedProteinSummary","text":"","code":"getWeightedProteinSummary(   feature_data,   norm = \"p_norm\",   norm_parameter = 1,   weights_mode = \"contributions\",   tolerance = 0.1,   max_iter = 10,   initial_summary = \"unique\",   weights_penalty = FALSE,   weights_penalty_param = 0.1,   save_weights_history = FALSE,   save_convergence_history = FALSE )"},{"path":"/reference/getWeightedProteinSummary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get robust protein-level summary based on unique and shared peptides — getWeightedProteinSummary","text":"feature_data data.table MSstatsTMT format. See also Details section norm \"p_norm\" \"Huber\" norm_parameter p norm==\"p_norm\", M norm==\"Huber\" weights_mode \"contributions\" \"sum one\" \"non-negative\" conditions, \"probabilities\" \"non-negative\" condition. tolerance tolerance indicate weights convergence max_iter maximum number iteration procedure initial_summary \"unique\", \"flat\" \"flat unique\" weights_penalty TRUE, weights penalized deviations equal value proteins matching given PSM weights_penalty_param penalty parameter save_weights_history logical, TRUE, weights iterations returned save_convergence_history logical, TRUE, differences consecutive weights estimator iterations returned","code":""},{"path":"/reference/getWeightedProteinSummary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get robust protein-level summary based on unique and shared peptides — getWeightedProteinSummary","text":"list data frames summary information. See Details section information","code":""},{"path":"/reference/getWeightedProteinSummary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get robust protein-level summary based on unique and shared peptides — getWeightedProteinSummary","text":"1. Input format: function takes input data MSstatsTMT format, data frame columns ProteinName, PeptideSequence, Charge, PSM (equal PeptideSequence Charge separated underscore), Channel, Intensity, Run annotation columns: BioReplicate, Condition, Mixture, TechRepMixture. Additionally, use two columns: log2IntensityNormalized Cluster. first column stores log-transformed normalized intensities (can obtained normalizeSharedPeptides function). column provided, data normalized summarization. second column stores information connected sub-graphs peptide-protein graph. column can added addClusterMembership function omitted. second case, information added summarization. 2. Output format: S4 object class \"MSstatsWeightedSummary\" consists following items: FeatureLevelData:feature-level (input) data ProteinLevelData:protein-level (summarized) output data Weights:table final peptide-protein Weights ConvergenceSummary:table information convergence Cluster Run WeightsHistory:optional data.table Weights iterations fitting algorithm ConvergenceHistory:optional data.table sums absolute values differences Weights consecutive iteration Elements object can accessed functions featureData, proteinData, featurWeights, convergenceSummary, weightsHistory, convergenceHistory statistical details method, please consult vignette.","code":""},{"path":"/reference/getWeightedSummarySingleRun.html","id":null,"dir":"Reference","previous_headings":"","what":"Robust summary for a single run — getWeightedSummarySingleRun","title":"Robust summary for a single run — getWeightedSummarySingleRun","text":"Robust summary single run","code":""},{"path":"/reference/getWeightedSummarySingleRun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Robust summary for a single run — getWeightedSummarySingleRun","text":"","code":"getWeightedSummarySingleRun(   feature_data,   peptide_protein_dt,   norm,   norm_parameter,   weights_mode,   tolerance,   max_iter,   initial_summary,   weights_penalty,   weights_penalty_param )"},{"path":"/reference/getWeightedSummarySingleRun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Robust summary for a single run — getWeightedSummarySingleRun","text":"feature_data data.table MSstatsTMT format. See also Details section peptide_protein_dt table peptide-protein matches norm \"p_norm\" \"Huber\" norm_parameter p norm==\"p_norm\", M norm==\"Huber\" weights_mode \"contributions\" \"sum one\" \"non-negative\" conditions, \"probabilities\" \"non-negative\" condition. tolerance tolerance indicate weights convergence max_iter maximum number iteration procedure initial_summary \"unique\", \"flat\" \"flat unique\" weights_penalty TRUE, weights penalized deviations equal value proteins matching given PSM weights_penalty_param penalty parameter","code":""},{"path":"/reference/getWeightsConstraints.html","id":null,"dir":"Reference","previous_headings":"","what":"Get constraints for weights — getWeightsConstraints","title":"Get constraints for weights — getWeightsConstraints","text":"Get constraints weights","code":""},{"path":"/reference/getWeightsConstraints.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get constraints for weights — getWeightsConstraints","text":"","code":"getWeightsConstraints(   params_full,   design_matrix,   weights_mode,   cols,   protein_cols,   psms_cols )"},{"path":"/reference/getWeightsConstraints.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get constraints for weights — getWeightsConstraints","text":"params_full object generated CVXR::Variables design_matrix design matrix weights optimization weights_mode \"contributions\" \"sum one\" \"non-negative\" conditions, \"probabilities\" \"non-negative\" condition. cols column names design matrix protein_cols protein names extracted column names psms_cols feature names extracted column names","code":""},{"path":"/reference/getWeightsDesign.html","id":null,"dir":"Reference","previous_headings":"","what":"Get design matrix and response for weights calculation — getWeightsDesign","title":"Get design matrix and response for weights calculation — getWeightsDesign","text":"Get design matrix response weights calculation","code":""},{"path":"/reference/getWeightsDesign.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get design matrix and response for weights calculation — getWeightsDesign","text":"","code":"getWeightsDesign(feature_data)"},{"path":"/reference/getWeightsDesign.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get design matrix and response for weights calculation — getWeightsDesign","text":"feature_data data.table MSstatsTMT format. See also Details section","code":""},{"path":"/reference/getWeightsHistory.html","id":null,"dir":"Reference","previous_headings":"","what":"Get history of weights from all iterations — getWeightsHistory","title":"Get history of weights from all iterations — getWeightsHistory","text":"Get history weights iterations","code":""},{"path":"/reference/getWeightsHistory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get history of weights from all iterations — getWeightsHistory","text":"","code":"getWeightsHistory(summary_per_cluster, save_weights_history)"},{"path":"/reference/getWeightsHistory.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get history of weights from all iterations — getWeightsHistory","text":"summary_per_cluster output getClusterSummaries save_weights_history logical, TRUE, weights iterations returned","code":""},{"path":"/reference/getWeightsSummary.html","id":null,"dir":"Reference","previous_headings":"","what":"Get summary of final weights — getWeightsSummary","title":"Get summary of final weights — getWeightsSummary","text":"Get summary final weights","code":""},{"path":"/reference/getWeightsSummary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get summary of final weights — getWeightsSummary","text":"","code":"getWeightsSummary(summary_per_cluster)"},{"path":"/reference/getWeightsSummary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get summary of final weights — getWeightsSummary","text":"summary_per_cluster output getClusterSummaries","code":""},{"path":"/reference/makeMSstatsTMTInput-MSstatsWeightedSummary-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Create input for MSstatsTMT::groupComparison function — makeMSstatsTMTInput,MSstatsWeightedSummary-method","title":"Create input for MSstatsTMT::groupComparison function — makeMSstatsTMTInput,MSstatsWeightedSummary-method","text":"Create input MSstatsTMT::groupComparison function","code":""},{"path":"/reference/makeMSstatsTMTInput-MSstatsWeightedSummary-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create input for MSstatsTMT::groupComparison function — makeMSstatsTMTInput,MSstatsWeightedSummary-method","text":"","code":"# S4 method for MSstatsWeightedSummary makeMSstatsTMTInput(weighted_summary, msstatstmt_output = NULL)"},{"path":"/reference/makeMSstatsTMTInput-MSstatsWeightedSummary-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create input for MSstatsTMT::groupComparison function — makeMSstatsTMTInput,MSstatsWeightedSummary-method","text":"weighted_summary output getWeightedProteinSummary function msstatstmt_output optional output MSstatsTMT::proteinSummarization function","code":""},{"path":"/reference/makeMSstatsTMTInput-MSstatsWeightedSummary-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create input for MSstatsTMT::groupComparison function — makeMSstatsTMTInput,MSstatsWeightedSummary-method","text":"list","code":""},{"path":"/reference/makeMSstatsTMTInput.html","id":null,"dir":"Reference","previous_headings":"","what":"Create input for MSstatsTMT::groupComparison function — makeMSstatsTMTInput","title":"Create input for MSstatsTMT::groupComparison function — makeMSstatsTMTInput","text":"Create input MSstatsTMT::groupComparison function","code":""},{"path":"/reference/makeMSstatsTMTInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create input for MSstatsTMT::groupComparison function — makeMSstatsTMTInput","text":"","code":"makeMSstatsTMTInput(weighted_summary, msstatstmt_output = NULL)"},{"path":"/reference/normalizePeptides.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalization between channels (before summarization) — normalizePeptides","title":"Normalization between channels (before summarization) — normalizePeptides","text":"Normalization channels (summarization)","code":""},{"path":"/reference/normalizePeptides.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalization between channels (before summarization) — normalizePeptides","text":"","code":"normalizePeptides(feature_data)"},{"path":"/reference/normalizePeptides.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalization between channels (before summarization) — normalizePeptides","text":"feature_data data.table MSstatsTMT format. See also Details section","code":""},{"path":"/reference/normalizePeptides.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalization between channels (before summarization) — normalizePeptides","text":"data.table","code":""},{"path":"/reference/normalizeSharedPeptides.html","id":null,"dir":"Reference","previous_headings":"","what":"Normalization for TMT data with shared peptides — normalizeSharedPeptides","title":"Normalization for TMT data with shared peptides — normalizeSharedPeptides","text":"Normalization TMT data shared peptides","code":""},{"path":"/reference/normalizeSharedPeptides.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normalization for TMT data with shared peptides — normalizeSharedPeptides","text":"","code":"normalizeSharedPeptides(feature_data)"},{"path":"/reference/normalizeSharedPeptides.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normalization for TMT data with shared peptides — normalizeSharedPeptides","text":"feature_data data.table MSstatsTMT format. See also Details section","code":""},{"path":"/reference/normalizeSharedPeptides.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normalization for TMT data with shared peptides — normalizeSharedPeptides","text":"data.table","code":""},{"path":"/reference/normalizeSharedPeptides.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Normalization for TMT data with shared peptides — normalizeSharedPeptides","text":"based MSstatsTMT code Ting Huang","code":""},{"path":"/reference/plotClusterStats.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot statistics about clusters of proteins — plotClusterStats","title":"Plot statistics about clusters of proteins — plotClusterStats","text":"Plot statistics clusters proteins","code":""},{"path":"/reference/plotClusterStats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot statistics about clusters of proteins — plotClusterStats","text":"","code":"plotClusterStats(   cluster_statistics,   statistic,   only_clusters_with_shared = FALSE )"},{"path":"/reference/plotClusterStats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot statistics about clusters of proteins — plotClusterStats","text":"cluster_statistics output `getClusterStatistics` function. statistic one column names `cluster_statistics` parameter. only_clusters_with_shared `TRUE`, statistics presented cluster one protein.","code":""},{"path":"/reference/plotDistributionComparison.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare distribution of log2-intensities per channel with and without shared peptides — plotDistributionComparison","title":"Compare distribution of log2-intensities per channel with and without shared peptides — plotDistributionComparison","text":"Compare distribution log2-intensities per channel without shared peptides","code":""},{"path":"/reference/plotDistributionComparison.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare distribution of log2-intensities per channel with and without shared peptides — plotDistributionComparison","text":"","code":"plotDistributionComparison(input, plot_profiles = FALSE)"},{"path":"/reference/plotDistributionComparison.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare distribution of log2-intensities per channel with and without shared peptides — plotDistributionComparison","text":"input data.table plot_profiles TRUE, feature profiles plotted","code":""},{"path":"/reference/plotDistributionComparison.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare distribution of log2-intensities per channel with and without shared peptides — plotDistributionComparison","text":"ggplot","code":""},{"path":"/reference/plotProfiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot feature profiles — plotProfiles","title":"Plot feature profiles — plotProfiles","text":"Plot feature profiles","code":""},{"path":"/reference/plotProfiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot feature profiles — plotProfiles","text":"","code":"plotProfiles(input)"},{"path":"/reference/plotProfiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot feature profiles — plotProfiles","text":"input data.table","code":""},{"path":"/reference/plotProfiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot feature profiles — plotProfiles","text":"ggplot","code":""},{"path":"/reference/plotSummary-MSstatsWeightedSummary-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot summary for a given cluster or proteins set — plotSummary,MSstatsWeightedSummary-method","title":"Plot summary for a given cluster or proteins set — plotSummary,MSstatsWeightedSummary-method","text":"Plot summary given cluster proteins set","code":""},{"path":"/reference/plotSummary-MSstatsWeightedSummary-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot summary for a given cluster or proteins set — plotSummary,MSstatsWeightedSummary-method","text":"","code":"# S4 method for MSstatsWeightedSummary plotSummary(   weighted_summary,   cluster = NULL,   proteins = NULL,   channel_order = NULL )"},{"path":"/reference/plotSummary-MSstatsWeightedSummary-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot summary for a given cluster or proteins set — plotSummary,MSstatsWeightedSummary-method","text":"weighted_summary output getWeightedProteinSummary function cluster optional ID cluster plot. Either `cluster` `proteins` must provided proteins optional vector proteins plot. Either `cluster` `proteins` must provided channel_order optional vector ordered channel IDs. provided, x-axis plot follow order","code":""},{"path":"/reference/plotSummary-MSstatsWeightedSummary-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot summary for a given cluster or proteins set — plotSummary,MSstatsWeightedSummary-method","text":"ggplot2 object","code":""},{"path":"/reference/plotSummary.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot summary for a given cluster or proteins set — plotSummary","title":"Plot summary for a given cluster or proteins set — plotSummary","text":"Plot summary given cluster proteins set","code":""},{"path":"/reference/plotSummary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot summary for a given cluster or proteins set — plotSummary","text":"","code":"plotSummary(   weighted_summary,   cluster = NULL,   proteins = NULL,   channel_order = NULL )"},{"path":"/reference/plotSummary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot summary for a given cluster or proteins set — plotSummary","text":"ggplot2 object","code":""},{"path":"/reference/plotSummaryComparison.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot multiple protein-level summaries — plotSummaryComparison","title":"Plot multiple protein-level summaries — plotSummaryComparison","text":"Plot multiple protein-level summaries","code":""},{"path":"/reference/plotSummaryComparison.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot multiple protein-level summaries — plotSummaryComparison","text":"","code":"plotSummaryComparison(..., channel_order = NULL, feature_data = NULL)"},{"path":"/reference/plotSummaryComparison.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot multiple protein-level summaries — plotSummaryComparison","text":"... data.tables summaries channel_order optional order x-axis (Channel column) feature_data optional data.table plotting feature-level distribution channel","code":""},{"path":"/reference/plotSummaryComparison.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot multiple protein-level summaries — plotSummaryComparison","text":"ggplot","code":""},{"path":"/reference/processProteinOptimSolution.html","id":null,"dir":"Reference","previous_headings":"","what":"Get protein abundances from optimization result — processProteinOptimSolution","title":"Get protein abundances from optimization result — processProteinOptimSolution","text":"Get protein abundances optimization result","code":""},{"path":"/reference/processProteinOptimSolution.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get protein abundances from optimization result — processProteinOptimSolution","text":"","code":"processProteinOptimSolution(   solution,   optimization_problem,   feature_data,   design_matrix )"},{"path":"/reference/processProteinOptimSolution.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get protein abundances from optimization result — processProteinOptimSolution","text":"solution solution generated CVXR::solve optimization_problem object returned CVXR::Problem feature_data data.table MSstatsTMT format. See also Details section design_matrix design matrix protein model optimization","code":""},{"path":"/reference/processSummarizationOutput.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare summarizaton output — processSummarizationOutput","title":"Prepare summarizaton output — processSummarizationOutput","text":"Prepare summarizaton output","code":""},{"path":"/reference/processSummarizationOutput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare summarizaton output — processSummarizationOutput","text":"","code":"processSummarizationOutput(   summary_per_cluster,   feature_data,   annotation,   save_weights_history,   save_convergence_history,   tolerance )"},{"path":"/reference/processSummarizationOutput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare summarizaton output — processSummarizationOutput","text":"summary_per_cluster output getClusterSummaries feature_data data.table MSstatsTMT format. See also Details section annotation output getAnnotation save_weights_history logical, TRUE, weights iterations returned save_convergence_history logical, TRUE, differences consecutive weights estimator iterations returned tolerance tolerance indicate weights convergence","code":""},{"path":"/reference/proteinClusters-MSstatsWeightedSummary-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract cluster information from MSstatsWeightedSummary object — proteinClusters,MSstatsWeightedSummary-method","title":"Extract cluster information from MSstatsWeightedSummary object — proteinClusters,MSstatsWeightedSummary-method","text":"Extract cluster information MSstatsWeightedSummary object","code":""},{"path":"/reference/proteinClusters-MSstatsWeightedSummary-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract cluster information from MSstatsWeightedSummary object — proteinClusters,MSstatsWeightedSummary-method","text":"","code":"# S4 method for MSstatsWeightedSummary proteinClusters(weighted_summary)"},{"path":"/reference/proteinClusters-MSstatsWeightedSummary-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract cluster information from MSstatsWeightedSummary object — proteinClusters,MSstatsWeightedSummary-method","text":"weighted_summary output getWeightedProteinSummary function","code":""},{"path":"/reference/proteinClusters-MSstatsWeightedSummary-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract cluster information from MSstatsWeightedSummary object — proteinClusters,MSstatsWeightedSummary-method","text":"data.table","code":""},{"path":"/reference/proteinClusters.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract cluster information from MSstatsWeightedSummary object — proteinClusters","title":"Extract cluster information from MSstatsWeightedSummary object — proteinClusters","text":"Extract cluster information MSstatsWeightedSummary object","code":""},{"path":"/reference/proteinClusters.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract cluster information from MSstatsWeightedSummary object — proteinClusters","text":"","code":"proteinClusters(weighted_summary)"},{"path":"/reference/proteinData-MSstatsWeightedSummary-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract protein-level data from MSstatsWeightedSummary object — proteinData,MSstatsWeightedSummary-method","title":"Extract protein-level data from MSstatsWeightedSummary object — proteinData,MSstatsWeightedSummary-method","text":"Extract protein-level data MSstatsWeightedSummary object","code":""},{"path":"/reference/proteinData-MSstatsWeightedSummary-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract protein-level data from MSstatsWeightedSummary object — proteinData,MSstatsWeightedSummary-method","text":"","code":"# S4 method for MSstatsWeightedSummary proteinData(weighted_summary, proteins = NULL)"},{"path":"/reference/proteinData-MSstatsWeightedSummary-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract protein-level data from MSstatsWeightedSummary object — proteinData,MSstatsWeightedSummary-method","text":"weighted_summary output getWeightedProteinSummary function proteins optional character vector proteins extract. NULL, proteins returned","code":""},{"path":"/reference/proteinData-MSstatsWeightedSummary-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract protein-level data from MSstatsWeightedSummary object — proteinData,MSstatsWeightedSummary-method","text":"data.table","code":""},{"path":"/reference/proteinData.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract protein-level data from MSstatsWeightedSummary object — proteinData","title":"Extract protein-level data from MSstatsWeightedSummary object — proteinData","text":"Extract protein-level data MSstatsWeightedSummary object","code":""},{"path":"/reference/proteinData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract protein-level data from MSstatsWeightedSummary object — proteinData","text":"","code":"proteinData(weighted_summary, proteins = NULL)"},{"path":"/reference/summarizeProteinsClusterSingleRun.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimize a given criterion to estimate protein abundances — summarizeProteinsClusterSingleRun","title":"Optimize a given criterion to estimate protein abundances — summarizeProteinsClusterSingleRun","text":"Optimize given criterion estimate protein abundances","code":""},{"path":"/reference/summarizeProteinsClusterSingleRun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimize a given criterion to estimate protein abundances — summarizeProteinsClusterSingleRun","text":"","code":"summarizeProteinsClusterSingleRun(   feature_data,   weights,   norm,   norm_parameter,   use_shared )"},{"path":"/reference/summarizeProteinsClusterSingleRun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimize a given criterion to estimate protein abundances — summarizeProteinsClusterSingleRun","text":"feature_data data.table MSstatsTMT format. See also Details section weights data.table weights. norm \"p_norm\" \"Huber\" norm_parameter p norm==\"p_norm\", M norm==\"Huber\" use_shared TRUE, shared peptides used.","code":""},{"path":"/reference/weightsHistory-MSstatsWeightedSummary-method.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract weights history from MSstatsWeightedSummary object — weightsHistory,MSstatsWeightedSummary-method","title":"Extract weights history from MSstatsWeightedSummary object — weightsHistory,MSstatsWeightedSummary-method","text":"Extract weights history MSstatsWeightedSummary object","code":""},{"path":"/reference/weightsHistory-MSstatsWeightedSummary-method.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract weights history from MSstatsWeightedSummary object — weightsHistory,MSstatsWeightedSummary-method","text":"","code":"# S4 method for MSstatsWeightedSummary weightsHistory(weighted_summary, shared_only = TRUE)"},{"path":"/reference/weightsHistory-MSstatsWeightedSummary-method.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract weights history from MSstatsWeightedSummary object — weightsHistory,MSstatsWeightedSummary-method","text":"weighted_summary output getWeightedProteinSummary function shared_only logical, output data.table include shared peptides","code":""},{"path":"/reference/weightsHistory-MSstatsWeightedSummary-method.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract weights history from MSstatsWeightedSummary object — weightsHistory,MSstatsWeightedSummary-method","text":"data.table","code":""},{"path":"/reference/weightsHistory.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract weights history from MSstatsWeightedSummary object — weightsHistory","title":"Extract weights history from MSstatsWeightedSummary object — weightsHistory","text":"Extract weights history MSstatsWeightedSummary object","code":""},{"path":"/reference/weightsHistory.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract weights history from MSstatsWeightedSummary object — weightsHistory","text":"","code":"weightsHistory(weighted_summary, shared_only = TRUE)"}]
